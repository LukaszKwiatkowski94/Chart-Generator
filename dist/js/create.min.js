"use strict";var list=$("#list__container"),items=[],ctxCreate=$("#createChart"),myChartCreate=new Chart(ctxCreate,{});function saveItems(){try{localStorage.setItem("items",JSON.stringify(items)),reloadChart(),showOrHideElements()}catch(e){console.error(e)}}function loadItems(){try{(localStorage.getItem("items")?(items=JSON.parse(localStorage.getItem("items")),prepareHTML_LoadedItems(),reloadChart):(items=[],showOrHideElements))()}catch(e){console.error(e)}}function prepareHTML_LoadedItems(){try{list.html(""),items.forEach(function(e){var a=e.id,t=document.createElement("div"),n=(t.setAttribute("data-id",a),t.classList.add("data__list-item"),document.createElement("div")),i=(n.classList.add("data__list-item-name"),n.classList.add("data__list-item-setting"),document.createElement("input")),r=(i.setAttribute("type","text"),i.setAttribute("value",e.name),i.addEventListener("change",function(){var e=items.findIndex(function(e){return e.id===a});items[e].name=i.value,saveItems()}),document.createElement("label")),r=(r.innerText="Name",r.setAttribute("for",a),n.appendChild(r),n.appendChild(i),document.createElement("div")),s=(r.classList.add("data__list-item-color"),r.classList.add("data__list-item-setting"),document.createElement("input")),d=(s.setAttribute("type","color"),s.setAttribute("value",e.color),s.addEventListener("change",function(){var e=items.findIndex(function(e){return e.id===a});items[e].color=s.value,saveItems()}),document.createElement("label")),d=(d.innerText="Color",d.setAttribute("for",a),r.appendChild(d),r.appendChild(s),document.createElement("div")),l=(d.classList.add("data__list-item-value"),d.classList.add("data__list-item-setting"),document.createElement("input")),e=(l.setAttribute("type","number"),l.setAttribute("value",e.value),l.addEventListener("change",function(){var e=items.findIndex(function(e){return e.id===a});items[e].value=l.value,saveItems()}),document.createElement("label")),e=(e.innerText="Value",e.setAttribute("for",a),d.appendChild(e),d.appendChild(l),document.createElement("div")),o=(e.classList.add("data__list-item-buttons"),document.createElement("button")),o=(o.classList.add("data__list-item-remove"),o.innerText="X",o.addEventListener("click",function(){items=items.filter(function(e){return e.id!==a}),saveItems(),prepareHTML_LoadedItems()}),e.appendChild(o),document.createElement("button")),o=(o.classList.add("data__list-item-up"),o.innerText="<<",o.addEventListener("click",function(){var e,t=items.findIndex(function(e){return e.id===a});0<t&&(e=items[t-1],items[t-1]=items[t],items[t]=e,saveItems(),prepareHTML_LoadedItems())}),e.appendChild(o),document.createElement("button"));o.classList.add("data__list-item-down"),o.innerText=">>",o.addEventListener("click",function(){var e,t=items.findIndex(function(e){return e.id===a});t<items.length-1&&(e=items[t+1],items[t+1]=items[t],items[t]=e,saveItems(),prepareHTML_LoadedItems())}),e.appendChild(o),t.appendChild(n),t.appendChild(r),t.appendChild(d),t.appendChild(e),list.append(t)})}catch(e){console.error(e)}}function clearItems(){localStorage.removeItem("items"),items=[],list.html(""),reloadChart(),showOrHideElements()}function reloadChart(){myChartCreate&&myChartCreate.destroy();var e=items.map(function(e){return{label:e.name,data:[e.value],backgroundColor:e.color,borderColor:e.color}});myChartCreate=new Chart(ctxCreate,{type:"bar",data:{labels:[""],datasets:e}})}function showOrHideElements(){try{console.log(items.length),0==items.length?($("#clear__btn").hide(),$("#asc__btn").hide(),$("#desc__btn").hide(),$("#download__btn").hide(),$("#createChart").hide()):($("#clear__btn").show(),$("#asc__btn").show(),$("#desc__btn").show(),$("#download__btn").show(),$("#createChart").show())}catch(e){console.error(e)}}$("#create__btn").click(function(){var e=Math.floor(16777215*Math.random()).toString(16),t=Math.random().toString(36).substring(7);items.push({id:t,name:"New item",color:"#"+e,value:0}),prepareHTML_LoadedItems(),saveItems()}),$("#clear__btn").click(function(){clearItems()}),$("#asc__btn").click(function(){items.sort(function(e,t){return e.value-t.value}),saveItems(),prepareHTML_LoadedItems()}),$("#desc__btn").click(function(){items.sort(function(e,t){return t.value-e.value}),saveItems(),prepareHTML_LoadedItems()}),$("#download__btn").click(function(){var e=document.getElementById("createChart").toDataURL("image/png"),t=document.createElement("a");t.href=e,t.download="chart.png",t.click()}),loadItems();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
