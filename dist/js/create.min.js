"use strict";var countOfElements=0,labels=[],colors=[],values=[],ctxCreate=$("#createChart"),myChartCreate=new Chart(ctxCreate,{}),reloadChart=($(".btn-add").click(function(){var t=Math.floor(16777215*Math.random()).toString(16);$(".chart__create-table").append($("<div></div>").addClass("chart__create-table-item").append($("<input></input>").addClass("chart__create-label").attr({type:"text"}).attr({value:"New item"})).append($("<input></input>").addClass("chart__create-color").attr({type:"color"}).attr({value:"#".concat(t)})).append($("<input></input>").addClass("chart__create-value").attr({type:"number"}).attr({value:0})).append($("<button></button>").addClass("chart__create-remove").text("X").click(function(t){countOfElements--,$(t.target).parent().remove(),checkButton(),reloadChart()})).append($("<button></button>").addClass("chart__create-up").text("<<").click(function(t){$(t.target).parent().insertBefore($(t.target).parent().prev()),reloadChart()})).append($("<button></button>").addClass("chart__create-down").text(">>").click(function(t){$(t.target).parent().insertAfter($(t.target).parent().next()),reloadChart()}))),$("input").on("change keyup paste",function(){reloadChart()}),countOfElements++,reloadChart(),checkButton()}),function(){myChartCreate.destroy(),labels=[],colors=[],values=[],$(".chart__create-label").toArray().map(function(t){labels.push(t.value)}),$(".chart__create-color").toArray().map(function(t){colors.push(t.value)}),$(".chart__create-value").toArray().map(function(t){values.push(t.value)}),myChartCreate=new Chart(ctxCreate,{type:"bar",data:{labels:labels,datasets:[{data:values,backgroundColor:colors,borderColor:colors,borderWidth:1}]},options:{scales:{y:{beginAtZero:!0}}}})}),checkButton=function(){10<=countOfElements?$(".btn-add").attr("disabled",!0):$(".btn-add").attr("disabled",!1)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS5qcyJdLCJuYW1lcyI6WyJjb3VudE9mRWxlbWVudHMiLCJsYWJlbHMiLCJjb2xvcnMiLCIkIiwidmFsdWVzIiwiQ2hhcnQiLCJjdHhDcmVhdGUiLCJvcHRpb25zIiwibXlDaGFydENyZWF0ZSIsInJhbmRDb2xvciIsImNsaWNrIiwiZmxvb3IiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJ0eXBlIiwiYXBwZW5kIiwidmFsdWUiLCJhdHRyIiwiY29uY2F0IiwiY2hlY2tCdXR0b24iLCJyZWxvYWRDaGFydCIsImUiLCJ0YXJnZXQiLCJwYXJlbnQiLCJ0ZXh0Iiwib24iLCJyZW1vdmUiLCJpbnNlcnRCZWZvcmUiLCJwcmV2IiwiYWRkQ2xhc3MiLCJwdXNoIiwiaW5zZXJ0QWZ0ZXIiLCJuZXh0IiwiZGF0YXNldHMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwiZGVzdHJveSIsImJlZ2luQXRaZXJvIiwidG9BcnJheSIsIm1hcCIsIml0ZW0iLCJkYXRhIiwic2NhbGVzIiwieSJdLCJtYXBwaW5ncyI6ImFBQUEsSUFBSUEsZ0JBQWtCLEVBQ2xCQyxPQUFTLEdBRFRELE9BQUFBLEdBQ0FDLE9BQVMsR0FDVEMsVUFBSkMsRUFBQSxjQUFBLEVBQ0lDLGNBQUosSUFBQUMsTUFBQUMsVUFBQSxFQUFBLEVBcUdFQyxhQW5HRkosRUFBQSxVQUFBLEVBQUlLLE1BQWdCLFdBRW5CLElBQUNDLEVBQVlDLEtBQU1DLE1BQU0sU0FBTkMsS0FBTUMsT0FBTixDQUFOSCxFQUFZSSxTQUFBLEVBQVpKLEVBRWJQLEVBREEsc0JBQUEsRUFBcUJRLE9BQ3JCUixFQUFFLGFBQUQsRUFNV1ksU0FBTSwwQkFObEJaLEVBSUdhLE9BR1NDLEVBQUFBLGlCQUFBQSxFQUVURCxTQUNFLHFCQUhPQyxFQUtBRixLQUFNLENBQUFBLEtBQUEsTUFBQSxDQUxORSxFQU1QQyxLQUFLLENBQUFELE1BQUEsVUFBQSxDQU5FQSxDQVBaZCxFQUNDYSxPQWlCV0QsRUFBQUEsaUJBQUFBLEVBQ1BHLFNBQUsscUJBREVILEVBQ0FFLEtBQU8sQ0FBQUYsS0FBQSxPQUFBLENBRFBBLEVBR1RDLEtBQUFBLENBQ0FiLE1BQUUsSUFBQWdCLE9BQUFWLENBQUEsQ0FERk8sQ0FIU0QsQ0FsQlpaLEVBMkJLQSxPQUNBaUIsRUFBQUEsaUJBQUFBLEVBQ0FDLFNBQVcscUJBRFhELEVBSUZKLEtBQUFBLENBQ0FiLEtBQUUsUUFERmEsQ0FKRUksRUFTRUUsS0FBRUMsQ0FBQUEsTUFBUUMsQ0FBUkQsQ0FUSkgsQ0E1QkxqQixFQUNDYSxPQTZDSWIsRUFBRW1CLG1CQUFELEVBQ0RELFNBQVcsc0JBRFhsQixFQTlDTHNCLEtBQUEsR0E4Q0t0QixFQUtITyxNQUFGLFNBQVdnQixHQUNWTCxlQUFXLEdBRFpsQixFQUFBbUIsRUFBQUMsTUFBQSxFQUFBQyxPQUFBLEVBQUFHLE9BQUEsRUFHQTNCLFlBQWUsRUFDZnFCLFlBQVcsQ0FDWEQsQ0FWS2pCLENBOUNMQSxFQWdDR2EsT0EyQkVLLEVBQUFBLG1CQUFBQSxFQUNMYixTQUFhLGtCQURSYSxFQUVMcEIsS0FBUyxJQUZKb0IsRUFHTG5CLE1BQVMsU0FBVG9CLEdBQ0FsQixFQUFNa0IsRUFBQUMsTUFBTm5CLEVBQUFvQixPQUFBcEIsRUFBQXdCLGFBQUF6QixFQUFBbUIsRUFBQUMsTUFBQSxFQUFBQyxPQUFBLEVBQUFLLEtBQUEsQ0FBQXpCLEVBQ0VpQixZQUFBLENBR0FwQixDQVJHb0IsQ0EzRExsQixFQXNFRWEsT0FHQWQsRUFBQUEsbUJBQUFBLEVBSEY0QixTQUFBLG9CQUdFNUIsRUFHQXVCLEtBQUEsSUFIQXZCLEVBTUFFLE1BQU8yQixTQUFBQSxHQUhUNUIsRUFBQW1CLEVBQUFDLE1BQUEsRUFBQUMsT0FBQSxFQUFBUSxZQUFBN0IsRUFBQW1CLEVBQUFDLE1BQUEsRUFBQUMsT0FBQSxFQUFBUyxLQUFBLENBQUEsRUFLQXpCLFlBQWEsQ0FDWk8sQ0FUQ2IsQ0F6RUZDLENBQUEsRUFtREFBLEVBQUUsT0FBRCxFQWtDQytCLEdBQVEscUJBQ1AsV0FsQ0ZiLFlBbUNHLENBbENILENBRkQsRUFHQXJCLGVBbUNJbUMsR0FsQ0pkLFlBbUNJZSxFQWxDSmhCLFlBbUNJaUIsQ0FsQ0osQ0E3REQsRUFtR1csV0FuQ1Y3QixjQW9DVThCLFFBcENWLEVBQ0FyQyxPQW9DSSxHQW5DSkMsT0FvQ0lxQyxHQW5DSm5DLE9Ba0NNLEdBakNORCxFQUFFLHNCQUFELEVBQ0NxQyxRQURGLEVBaUJnQkMsSUFBaEIsU0FBQUMsR0F0QkR6QyxPQUFBOEIsS0FBQVcsRUFBQXpCLEtBQUEsQ0FTRyxDQUpGLEVBTUFkLEVBb0NBLHNCQUFBLEVBbkNFcUMsUUFERixFQW9DQUMsSUFBQSxTQUFBQyxHQWpDRXhDLE9Bb0NDNkIsS0FBQVcsRUFBWXhCLEtBcENiLENBcUNELENBeENELEVBTUFmLEVBQUUsc0JBQUQsRUFDQ3FDLFFBREYsRUFFRUMsSUFBSSxTQUFDQyxHQUNMdEMsT0FBTzJCLEtBQUtXLEVBQUt6QixLQUFqQixDQUNBLENBSkYsRUFLQVQsY0FBZ0IsSUFBSUgsTUFBTUMsVUFBVyxDQUNwQ1MsS0FBTSxNQUNONEIsS0FBTSxDQUNMMUMsT0FBUUEsT0FDUmlDLFNBQVUsQ0FDVCxDQUVDUyxLQUFNdkMsT0FDTitCLGdCQUFpQmpDLE9BQ2pCa0MsWUFBYWxDLE9BQ2JtQyxZQUFhLENBTGQsRUFISSxFQVlOOUIsUUFBUyxDQUNScUMsT0FBUSxDQUNQQyxFQUFHLENBQ0ZOLFlBQWEsQ0FBQSxDQURYLENBREksQ0FEQSxDQWQyQixDQUFyQixDQXNCaEIsR0FFS25CLFlBQWMsV0FDSSxJQUFuQnBCLGdCQUNIRyxFQUFFLFVBQUQsRUFBYWUsS0FBSyxXQUFZLENBQUEsQ0FBL0IsRUFFQWYsRUFBRSxVQUFELEVBQWFlLEtBQUssV0FBWSxDQUFBLENBQS9CLENBRUQiLCJmaWxlIjoiY3JlYXRlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBjb3VudE9mRWxlbWVudHMgPSAwO1xyXG5sZXQgbGFiZWxzID0gW107XHJcbmxldCBjb2xvcnMgPSBbXTtcclxubGV0IHZhbHVlcyA9IFtdO1xyXG5jb25zdCBjdHhDcmVhdGUgPSAkKFwiI2NyZWF0ZUNoYXJ0XCIpO1xyXG5sZXQgbXlDaGFydENyZWF0ZSA9IG5ldyBDaGFydChjdHhDcmVhdGUsIHt9KTtcclxuXHJcbiQoXCIuYnRuLWFkZFwiKS5jbGljaygoKSA9PiB7XHJcblx0bGV0IHJhbmRDb2xvciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxNjc3NzIxNSkudG9TdHJpbmcoMTYpXHJcblx0JChcIi5jaGFydF9fY3JlYXRlLXRhYmxlXCIpLmFwcGVuZChcclxuXHRcdCQoXCI8ZGl2PjwvZGl2PlwiKVxyXG5cdFx0XHQuYWRkQ2xhc3MoXCJjaGFydF9fY3JlYXRlLXRhYmxlLWl0ZW1cIilcclxuXHRcdFx0LmFwcGVuZChcclxuXHRcdFx0XHQkKFwiPGlucHV0PjwvaW5wdXQ+XCIpXHJcblx0XHRcdFx0XHQuYWRkQ2xhc3MoXCJjaGFydF9fY3JlYXRlLWxhYmVsXCIpXHJcblx0XHRcdFx0XHQuYXR0cih7IHR5cGU6IFwidGV4dFwiIH0pXHJcblx0XHRcdFx0XHQuYXR0cih7IHZhbHVlOiAnTmV3IGl0ZW0nIH0pXHJcblx0XHRcdClcclxuXHRcdFx0LmFwcGVuZChcclxuXHRcdFx0XHQkKFwiPGlucHV0PjwvaW5wdXQ+XCIpXHJcblx0XHRcdFx0XHQuYWRkQ2xhc3MoXCJjaGFydF9fY3JlYXRlLWNvbG9yXCIpXHJcblx0XHRcdFx0XHQuYXR0cih7IHR5cGU6IFwiY29sb3JcIiB9KVxyXG5cdFx0XHRcdFx0LmF0dHIoeyB2YWx1ZTogYCMke3JhbmRDb2xvcn1gIH0pXHJcblx0XHRcdClcclxuXHRcdFx0LmFwcGVuZChcclxuXHRcdFx0XHQkKFwiPGlucHV0PjwvaW5wdXQ+XCIpXHJcblx0XHRcdFx0XHQuYWRkQ2xhc3MoXCJjaGFydF9fY3JlYXRlLXZhbHVlXCIpXHJcblx0XHRcdFx0XHQuYXR0cih7IHR5cGU6IFwibnVtYmVyXCIgfSlcclxuXHRcdFx0XHRcdC5hdHRyKHsgdmFsdWU6IDAgfSlcclxuXHRcdFx0KVxyXG5cdFx0XHQuYXBwZW5kKFxyXG5cdFx0XHRcdCQoXCI8YnV0dG9uPjwvYnV0dG9uPlwiKVxyXG5cdFx0XHRcdFx0LmFkZENsYXNzKFwiY2hhcnRfX2NyZWF0ZS1yZW1vdmVcIilcclxuXHRcdFx0XHRcdC50ZXh0KFwiWFwiKVxyXG5cdFx0XHRcdFx0LmNsaWNrKChlKSA9PiB7XHJcblx0XHRcdFx0XHRcdGNvdW50T2ZFbGVtZW50cy0tO1xyXG5cdFx0XHRcdFx0XHQkKGUudGFyZ2V0KS5wYXJlbnQoKS5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdFx0Y2hlY2tCdXR0b24oKTtcclxuXHRcdFx0XHRcdFx0cmVsb2FkQ2hhcnQoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdClcclxuXHRcdFx0LmFwcGVuZChcclxuXHRcdFx0XHQkKFwiPGJ1dHRvbj48L2J1dHRvbj5cIilcclxuXHRcdFx0XHRcdC5hZGRDbGFzcyhcImNoYXJ0X19jcmVhdGUtdXBcIilcclxuXHRcdFx0XHRcdC50ZXh0KFwiPDxcIilcclxuXHRcdFx0XHRcdC5jbGljaygoZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHQkKGUudGFyZ2V0KS5wYXJlbnQoKS5pbnNlcnRCZWZvcmUoJChlLnRhcmdldCkucGFyZW50KCkucHJldigpKTtcclxuXHRcdFx0XHRcdFx0cmVsb2FkQ2hhcnQoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdClcclxuXHRcdFx0LmFwcGVuZChcclxuXHRcdFx0XHQkKFwiPGJ1dHRvbj48L2J1dHRvbj5cIilcclxuXHRcdFx0XHRcdC5hZGRDbGFzcyhcImNoYXJ0X19jcmVhdGUtZG93blwiKVxyXG5cdFx0XHRcdFx0LnRleHQoXCI+PlwiKVxyXG5cdFx0XHRcdFx0LmNsaWNrKChlKSA9PiB7XHJcblx0XHRcdFx0XHRcdCQoZS50YXJnZXQpLnBhcmVudCgpLmluc2VydEFmdGVyKCQoZS50YXJnZXQpLnBhcmVudCgpLm5leHQoKSk7XHJcblx0XHRcdFx0XHRcdHJlbG9hZENoYXJ0KCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpXHJcblx0KTtcclxuXHQkKFwiaW5wdXRcIikub24oXCJjaGFuZ2Uga2V5dXAgcGFzdGVcIiwgKCkgPT4ge1xyXG5cdFx0cmVsb2FkQ2hhcnQoKTtcclxuXHR9KTtcclxuXHRjb3VudE9mRWxlbWVudHMrKztcclxuXHRyZWxvYWRDaGFydCgpO1xyXG5cdGNoZWNrQnV0dG9uKCk7XHJcbn0pO1xyXG5cclxuY29uc3QgcmVsb2FkQ2hhcnQgPSAoKSA9PiB7XHJcblx0bXlDaGFydENyZWF0ZS5kZXN0cm95KCk7XHJcblx0bGFiZWxzID0gW107XHJcblx0Y29sb3JzID0gW107XHJcblx0dmFsdWVzID0gW107XHJcblx0JChcIi5jaGFydF9fY3JlYXRlLWxhYmVsXCIpXHJcblx0XHQudG9BcnJheSgpXHJcblx0XHQubWFwKChpdGVtKSA9PiB7XHJcblx0XHRcdGxhYmVscy5wdXNoKGl0ZW0udmFsdWUpO1xyXG5cdFx0fSk7XHJcblxyXG5cdCQoXCIuY2hhcnRfX2NyZWF0ZS1jb2xvclwiKVxyXG5cdFx0LnRvQXJyYXkoKVxyXG5cdFx0Lm1hcCgoaXRlbSkgPT4ge1xyXG5cdFx0XHRjb2xvcnMucHVzaChpdGVtLnZhbHVlKTtcclxuXHRcdH0pO1xyXG5cclxuXHQkKFwiLmNoYXJ0X19jcmVhdGUtdmFsdWVcIilcclxuXHRcdC50b0FycmF5KClcclxuXHRcdC5tYXAoKGl0ZW0pID0+IHtcclxuXHRcdFx0dmFsdWVzLnB1c2goaXRlbS52YWx1ZSk7XHJcblx0XHR9KTtcclxuXHRteUNoYXJ0Q3JlYXRlID0gbmV3IENoYXJ0KGN0eENyZWF0ZSwge1xyXG5cdFx0dHlwZTogXCJiYXJcIixcclxuXHRcdGRhdGE6IHtcclxuXHRcdFx0bGFiZWxzOiBsYWJlbHMsXHJcblx0XHRcdGRhdGFzZXRzOiBbXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Ly8gbGFiZWw6IGxhYmVscyxcclxuXHRcdFx0XHRcdGRhdGE6IHZhbHVlcyxcclxuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogY29sb3JzLFxyXG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I6IGNvbG9ycyxcclxuXHRcdFx0XHRcdGJvcmRlcldpZHRoOiAxLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdF0sXHJcblx0XHR9LFxyXG5cdFx0b3B0aW9uczoge1xyXG5cdFx0XHRzY2FsZXM6IHtcclxuXHRcdFx0XHR5OiB7XHJcblx0XHRcdFx0XHRiZWdpbkF0WmVybzogdHJ1ZSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9LFxyXG5cdFx0fSxcclxuXHR9KTtcclxufTtcclxuXHJcbmNvbnN0IGNoZWNrQnV0dG9uID0gKCkgPT4ge1xyXG5cdGlmIChjb3VudE9mRWxlbWVudHMgPj0gMTApIHtcclxuXHRcdCQoXCIuYnRuLWFkZFwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdCQoXCIuYnRuLWFkZFwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xyXG5cdH1cclxufTtcclxuIl19
