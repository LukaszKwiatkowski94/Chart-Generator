"use strict";var list=$("#list__container"),items=[],ctxCreate=$("#createChart"),myChartCreate=new Chart(ctxCreate,{});function saveItems(){try{localStorage.setItem("items",JSON.stringify(items)),reloadChart(),showOrHideElements()}catch(e){console.error(e)}}function loadItems(){try{(localStorage.getItem("items")?(items=JSON.parse(localStorage.getItem("items")),prepareHTML_ListItems(),reloadChart):(items=[],showOrHideElements))()}catch(e){console.error(e)}}function prepareHTML_ListItems(){try{list.html(""),items.forEach(function(e){var a=e.id,t=document.createElement("div"),n=(t.setAttribute("data-id",a),t.classList.add("data__list-item"),document.createElement("div")),r=(n.classList.add("data__list-item-name"),n.classList.add("data__list-item-setting"),document.createElement("input")),i=(r.setAttribute("type","text"),r.setAttribute("value",e.name),r.addEventListener("change",function(){var e=items.findIndex(function(e){return e.id===a});items[e].name=r.value,saveItems()}),document.createElement("label")),i=(i.innerText="Name",i.setAttribute("for",a),n.appendChild(i),n.appendChild(r),document.createElement("div")),s=(i.classList.add("data__list-item-color"),i.classList.add("data__list-item-setting"),document.createElement("input")),c=(s.setAttribute("type","color"),s.setAttribute("value",e.color),s.addEventListener("change",function(){var e=items.findIndex(function(e){return e.id===a});items[e].color=s.value,saveItems()}),document.createElement("label")),c=(c.innerText="Color",c.setAttribute("for",a),i.appendChild(c),i.appendChild(s),document.createElement("div")),o=(c.classList.add("data__list-item-value"),c.classList.add("data__list-item-setting"),document.createElement("input")),e=(o.setAttribute("type","number"),o.setAttribute("value",e.value),o.addEventListener("change",function(){var e=items.findIndex(function(e){return e.id===a});items[e].value=o.value,saveItems()}),document.createElement("label")),e=(e.innerText="Value",e.setAttribute("for",a),c.appendChild(e),c.appendChild(o),document.createElement("div")),d=(e.classList.add("data__list-item-buttons"),document.createElement("button")),d=(d.classList.add("data__list-item-remove"),d.innerText="X",d.addEventListener("click",function(){items=items.filter(function(e){return e.id!==a}),saveItems(),prepareHTML_ListItems()}),e.appendChild(d),document.createElement("button")),d=(d.classList.add("data__list-item-up"),d.innerText="<<",d.addEventListener("click",function(){var e,t=items.findIndex(function(e){return e.id===a});0<t&&(e=items[t-1],items[t-1]=items[t],items[t]=e,saveItems(),prepareHTML_ListItems())}),e.appendChild(d),document.createElement("button"));d.classList.add("data__list-item-down"),d.innerText=">>",d.addEventListener("click",function(){var e,t=items.findIndex(function(e){return e.id===a});t<items.length-1&&(e=items[t+1],items[t+1]=items[t],items[t]=e,saveItems(),prepareHTML_ListItems())}),e.appendChild(d),t.appendChild(n),t.appendChild(i),t.appendChild(c),t.appendChild(e),list.append(t)})}catch(e){console.error(e)}}function clearItems(){try{localStorage.removeItem("items"),items=[],list.html(""),reloadChart(),showOrHideElements()}catch(e){console.error(e)}}function reloadChart(){try{myChartCreate&&myChartCreate.destroy();var e=items.map(function(e){return{label:e.name,data:[e.value],backgroundColor:e.color,borderColor:e.color}});myChartCreate=new Chart(ctxCreate,{type:"bar",data:{labels:[""],datasets:e}})}catch(e){console.error(e)}}function showOrHideElements(){try{console.log(items.length),0==items.length?($("#clear__btn").hide(),$("#asc__btn").hide(),$("#desc__btn").hide(),$("#download__btn").hide(),$("#createChart").hide()):($("#clear__btn").show(),$("#asc__btn").show(),$("#desc__btn").show(),$("#download__btn").show(),$("#createChart").show())}catch(e){console.error(e)}}$("#create__btn").click(function(){try{var e=Math.floor(16777215*Math.random()).toString(16),t={id:Math.random().toString(36).substring(7),name:"New item",color:"#"+e,value:0};items.push(t),prepareHTML_ListItems(),saveItems()}catch(e){console.error(e)}}),$("#clear__btn").click(function(){try{clearItems()}catch(e){console.error(e)}}),$("#asc__btn").click(function(){try{items.sort(function(e,t){return e.value-t.value}),saveItems(),prepareHTML_ListItems()}catch(e){console.error(e)}}),$("#desc__btn").click(function(){try{items.sort(function(e,t){return t.value-e.value}),saveItems(),prepareHTML_ListItems()}catch(e){console.error(e)}}),$("#download__btn").click(function(){try{var e=document.getElementById("createChart").toDataURL("image/png"),t=document.createElement("a");t.href=e,t.download="chart.png",t.click()}catch(e){console.error(e)}}),setTimeout(function(){loadItems()},1e3);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS5qcyJdLCJuYW1lcyI6WyJsaXN0IiwiJCIsImN0eENyZWF0ZSIsIm15Q2hhcnRDcmVhdGUiLCJDaGFydCIsInNhdmVJdGVtcyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiaXRlbXMiLCJyZWxvYWRDaGFydCIsImVycm9yIiwiY29uc29sZSIsImxvYWRJdGVtcyIsImdldEl0ZW0iLCJwcmVwYXJlSFRNTF9MaXN0SXRlbXMiLCJzaG93T3JIaWRlRWxlbWVudHMiLCJodG1sIiwiaWRlZG50aWZpZXIiLCJmb3JFYWNoIiwiaXRlbSIsIml0ZW1FbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibmFtZUl0ZW1Db250YWluZXIiLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5uZXJUZXh0IiwiZmluZEluZGV4IiwibmFtZSIsIm5hbWVJdGVtIiwiaWQiLCJpbmRleCIsInZhbHVlIiwiY29sb3JJdGVtQ29udGFpbmVyIiwibGFiZWxGb3JOYW1lSXRlbSIsImFwcGVuZENoaWxkIiwibGFiZWxGb3JDb2xvckl0ZW0iLCJjb2xvciIsImNvbG9ySXRlbSIsInZhbHVlSXRlbUNvbnRhaW5lciIsInZhbHVlSXRlbSIsImxhYmVsRm9yVmFsdWVJdGVtIiwicmVtb3ZlQnV0dG9uIiwiYnV0dG9uc0NvbnRhaW5lciIsInVwQnV0dG9uIiwiZmlsdGVyIiwidGVtcCIsImRvd25CdXR0b24iLCJsZW5ndGgiLCJhcHBlbmQiLCJyZW1vdmVJdGVtIiwiY2xlYXJJdGVtcyIsImRlc3Ryb3kiLCJkYXRhc2V0cyIsIm1hcCIsImRhdGEiLCJsYWJlbCIsImJhY2tncm91bmRDb2xvciIsImxhYmVscyIsImhpZGUiLCJzaG93IiwiY2xpY2siLCJyYW5kb20iLCJmbG9vciIsInN1YnN0cmluZyIsInRvU3RyaW5nIiwiTWF0aCIsInJhbmRDb2xvciIsInB1c2giLCJpdGVtT2JqZWN0Iiwic29ydCIsImEiLCJiIiwiZGF0YVVSTCIsImdldEVsZW1lbnRCeUlkIiwidG9EYXRhVVJMIiwiaHJlZiIsImRvd25sb2FkIl0sIm1hcHBpbmdzIjoiYUFBQSxJQUFJQSxLQUFPQyxFQUFFLGtCQUFrQixFQUEzQkQsTUFBUSxHQUlORSxVQUFjRCxFQUFBLGNBQWUsRUFDL0JFLGNBQWdCLElBQUlDLE1BQU1GLFVBQVcsRUFBRSxFQThCM0MsU0FDUUcsWUFDQUMsSUFDQUEsYUFBQUMsUUFBQSxRQUFBQyxLQUFBQyxVQUFBQyxLQUFBLENBQUEsRUFDSUMsWUFBWSxFQUlYQyxtQkFBTyxDQUdwQixDQUZRQyxNQUFRRCxHQUNaQyxRQUFBRCxNQUFBQSxDQUFBLENBQ0osQ0FBQSxDQUdBLFNBQ1FFLFlBQ0EsS0FDU1IsYUFBYVMsUUFBQ1QsT0FBYVMsR0FDaENDLE1BQUFBLEtBQUFBLE1BQXVCVixhQUFBUyxRQUFBLE9BQUEsQ0FBQSxFQUN2QkMsc0JBQUEsRUFFR0wsY0FFSE0sTUFBQUEsR0FDSkEscUJBSE8sQ0FPZixDQUZRSixNQUFRRCxHQUNaQyxRQUFBRCxNQUFBQSxDQUFBLENBQ0osQ0FFQSxDQUFBLFNBRWFNLHdCQUVMUixJQUNJVixLQUFJbUIsS0FBQUEsRUFBQUEsRUFFSlQsTUFBQVUsUUFBQSxTQUFBQyxHQUNRQyxJQUFBQSxFQUFjQyxFQUFTQyxHQUF2QkYsRUFBY0MsU0FBU0MsY0FBYyxLQUFLLEVBUTFDQyxHQUpSSCxFQUFBSSxhQUFBLFVBQUFQLENBQUEsRUFDUU0sRUFBaUJFLFVBQVdDLElBQUNKLGlCQUFvQixFQUdqQkQsU0FBQUMsY0FBdUIsS0FBQSxHQUs5Q0ssR0FGQUgsRUFBcUJDLFVBQU9DLElBQUEsc0JBQUEsRUFDNUJGLEVBQXNCTCxVQUFVTyxJQUFBLHlCQUFBLEVBQ2ZMLFNBQVVDLGNBQU0sT0FBQSxHQVF6Qk0sR0FQRHBCLEVBQU1xQixhQUFVLE9BQUksTUFBQSxFQUFJVixFQUFZRixhQUFXLFFBQUFFLEVBQUFXLElBQUEsRUFBQ0MsRUFBQUosaUJBQUEsU0FBQSxX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QUFPLENBR2xCLENBRk1DLE1BQVFELEdBQ1pDLFFBQUFELE1BQUFBLENBQUEsQ0FDRixDQUFGLENBQUMsRUF3TGVELEVBQUFBLGFBQWEsRUFBQXNELE1BQUEsV0FDakIsSUFDSWhELFdBQW1CLENBRzNCLENBRkUsTUFBWUwsR0FDRkEsUUFBTUEsTUFBTUEsQ0FBQSxDQUN4QixDQUNKLENBQUEsRUFzRFFDLEVBQUFBLFdBQWEsRUFBQ0QsTUFBTSxXQUN4QixJQUNKRixNQUFBZ0UsS0FBQSxTQUFBQyxFQUFBQyxHQUFBLE9BQUFELEVBQUF2QyxNQUFBd0MsRUFBQXhDLEtBQUEsQ0FBQSxFQU1RL0IsVUFBVSxFQUp0Qlcsc0JBQUEsQ0FHWU4sQ0FGTixNQUFhdUQsR0FDUHBELFFBQUFELE1BQUFBLENBQUEsQ0FDQUYsQ0FNUixDQUFDLEVBSk9NLEVBQUFBLFlBQUFBLEVBQUFBLE1BQXNCLFdBQ3hCLElBQ1VKLE1BQU1BLEtBQUssU0FBQytELEVBQUFDLEdBQUEsT0FBQUEsRUFBQXhDLE1BQUF1QyxFQUFBdkMsS0FBQSxDQUFBLEVBQ3hCL0IsVUFBQSxFQUNGVyxzQkFBQSxDQUdBLENBS0ksTUFBT0osR0FOakJDLFFBQUFELE1BQUFBLENBQUEsQ0FDTSxDQUNFLENBQUEsRUFDMENYLEVBQUMsZ0JBQUEsRUFBQWdFLE1BQUEsV0FDdkM1RCxJQUNBVyxJQUNVNkQsRUFEV3RELFNBQUV1RCxlQUFBLGFBQUEsRUFDWEMsVUFBQSxXQUFBLEVBQ0puRSxFQUFNQSxTQUFNWSxjQUFBLEdBQUEsRUFDeEJtRCxFQUFBSyxLQUFBSCxFQUNGRixFQUFBTSxTQUFBLFlBVU1OLEVBQUVWLE1BQU0sQ0FOUixDQUZaLE1BQUFyRCxHQUNNQyxRQUFrQm9ELE1BQU1yRCxDQUFBLENBQ2xCLENBQ0EsQ0FBQSxFQUlBK0QsV0FBVSxXQUNSVixVQUFPLENBQ1gsRUFBQSxHQUFPckQiLCJmaWxlIjoiY3JlYXRlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBsaXN0ID0gJCgnI2xpc3RfX2NvbnRhaW5lcicpO1xyXG5cclxubGV0IGl0ZW1zID0gW107XHJcblxyXG5jb25zdCBjdHhDcmVhdGUgPSAkKFwiI2NyZWF0ZUNoYXJ0XCIpO1xyXG5sZXQgbXlDaGFydENyZWF0ZSA9IG5ldyBDaGFydChjdHhDcmVhdGUsIHt9KTtcclxuXHJcbiQoJyNjcmVhdGVfX2J0bicpLmNsaWNrKCgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gU2V0IHZhbHVlcyBmb3IgbmV3IGl0ZW1cclxuICAgICAgICAgICAgbGV0IHJhbmRDb2xvciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxNjc3NzIxNSkudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgICAgICBsZXQgaWRlZG50aWZpZXIgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNyk7XHJcbiAgICBcclxuICAgICAgICAvLyBDcmVhdGUgb2JqZWN0IGZvciBpdGVtXHJcbiAgICAgICAgICAgIGxldCBpdGVtT2JqZWN0ID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IGlkZWRudGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldyBpdGVtJyxcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAnIycrcmFuZENvbG9yLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgfTtcclxuICAgIFxyXG4gICAgICAgIC8vIEFkZCBpdGVtIG9iamVjdCB0byBpdGVtcyBhcnJheVxyXG4gICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW1PYmplY3QpO1xyXG4gICAgXHJcbiAgICAgICAgLy8gUHJlcGFyZSBIVE1MIGZvciBuZXcgaXRlbVxyXG4gICAgICAgICAgICBwcmVwYXJlSFRNTF9MaXN0SXRlbXMoKTtcclxuICAgIFxyXG4gICAgICAgIC8vIFNhdmUgaXRlbXMgdG8gbG9jYWwgc3RvcmFnZVxyXG4gICAgICAgICAgICBzYXZlSXRlbXMoKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy8gU2F2ZSBvciBVcGRhdGUgaXRlbXMgaW4gbG9jYWwgc3RvcmFnZVxyXG5mdW5jdGlvbiBzYXZlSXRlbXMoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdpdGVtcycsIEpTT04uc3RyaW5naWZ5KGl0ZW1zKSk7XHJcbiAgICAgICAgLy8gUmVsb2FkIGNoYXJ0XHJcbiAgICAgICAgICAgIHJlbG9hZENoYXJ0KCk7XHJcblxyXG4gICAgICAgIC8vIFNob3cgb3IgaGlkZSBlbGVtZW50c1xyXG4gICAgICAgICAgICBzaG93T3JIaWRlRWxlbWVudHMoKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICB9XHJcbn0gICBcclxuXHJcbi8vIExvYWQgaXRlbXMgZnJvbSBsb2NhbCBzdG9yYWdlXHJcbmZ1bmN0aW9uIGxvYWRJdGVtcygpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2l0ZW1zJykpIHtcclxuICAgICAgICAgICAgaXRlbXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpdGVtcycpKTtcclxuICAgICAgICAgICAgcHJlcGFyZUhUTUxfTGlzdEl0ZW1zKCk7XHJcbiAgICAgICAgICAgIC8vIFJlbG9hZCBjaGFydFxyXG4gICAgICAgICAgICAgICAgcmVsb2FkQ2hhcnQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpdGVtcyA9IFtdO1xyXG4gICAgICAgICAgICBzaG93T3JIaWRlRWxlbWVudHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcmVwYXJlSFRNTF9MaXN0SXRlbXMoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGxpc3QuaHRtbCgnJyk7XHJcblxyXG4gICAgICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpZGVkbnRpZmllciA9IGl0ZW0uaWQ7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgbmV3IGl0ZW1cclxuICAgICAgICAgICAgICAgIGxldCBpdGVtRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgaXRlbUVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgaWRlZG50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgaXRlbUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGF0YV9fbGlzdC1pdGVtJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgbmFtZSBpdGVtIGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgbGV0IG5hbWVJdGVtQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG5hbWUgaXRlbSBpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWVJdGVtQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2RhdGFfX2xpc3QtaXRlbS1uYW1lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZUl0ZW1Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnZGF0YV9fbGlzdC1pdGVtLXNldHRpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWVJdGVtLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZUl0ZW0uc2V0QXR0cmlidXRlKCd2YWx1ZScsIGl0ZW0ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBpdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBpZGVkbnRpZmllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zW2luZGV4XS5uYW1lID0gbmFtZUl0ZW0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBsYWJlbCBmb3IgbmFtZSBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsRm9yTmFtZUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsRm9yTmFtZUl0ZW0uaW5uZXJUZXh0ID0gJ05hbWUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsRm9yTmFtZUl0ZW0uc2V0QXR0cmlidXRlKCdmb3InLCBpZGVkbnRpZmllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZUl0ZW1Db250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWxGb3JOYW1lSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZUl0ZW1Db250YWluZXIuYXBwZW5kQ2hpbGQobmFtZUl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIGNvbG9yIGl0ZW0gY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICBsZXQgY29sb3JJdGVtQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGNvbG9yIGl0ZW0gaW5wdXRcclxuICAgICAgICAgICAgICAgICAgICBjb2xvckl0ZW1Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnZGF0YV9fbGlzdC1pdGVtLWNvbG9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3JJdGVtQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2RhdGFfX2xpc3QtaXRlbS1zZXR0aW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9ySXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3JJdGVtLnNldEF0dHJpYnV0ZSgndHlwZScsICdjb2xvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9ySXRlbS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgaXRlbS5jb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3JJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gaXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWRlZG50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tpbmRleF0uY29sb3IgPSBjb2xvckl0ZW0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBsYWJlbCBmb3IgY29sb3IgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsYWJlbEZvckNvbG9ySXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxGb3JDb2xvckl0ZW0uaW5uZXJUZXh0ID0gJ0NvbG9yJztcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbEZvckNvbG9ySXRlbS5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlkZWRudGlmaWVyKTtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvckl0ZW1Db250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWxGb3JDb2xvckl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9ySXRlbUNvbnRhaW5lci5hcHBlbmRDaGlsZChjb2xvckl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHZhbHVlIGl0ZW0gY29udGFpbmVyXHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlSXRlbUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB2YWx1ZSBpdGVtIGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVJdGVtQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2RhdGFfX2xpc3QtaXRlbS12YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlSXRlbUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdkYXRhX19saXN0LWl0ZW0tc2V0dGluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlSXRlbS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVJdGVtLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBpdGVtLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBpdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBpZGVkbnRpZmllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zW2luZGV4XS52YWx1ZSA9IHZhbHVlSXRlbS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUl0ZW1zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGxhYmVsIGZvciB2YWx1ZSBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsRm9yVmFsdWVJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbEZvclZhbHVlSXRlbS5pbm5lclRleHQgPSAnVmFsdWUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsRm9yVmFsdWVJdGVtLnNldEF0dHJpYnV0ZSgnZm9yJywgaWRlZG50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlSXRlbUNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbEZvclZhbHVlSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVJdGVtQ29udGFpbmVyLmFwcGVuZENoaWxkKHZhbHVlSXRlbSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgYnV0dG9ucyBjb250YWluZXJcclxuICAgICAgICAgICAgICAgIGxldCBidXR0b25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBidXR0b25zQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2RhdGFfX2xpc3QtaXRlbS1idXR0b25zJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgcmVtb3ZlIGJ1dHRvblxyXG5cclxuICAgICAgICAgICAgICAgIGxldCByZW1vdmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgICAgIHJlbW92ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdkYXRhX19saXN0LWl0ZW0tcmVtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVCdXR0b24uaW5uZXJUZXh0ID0gJ1gnO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5pZCAhPT0gaWRlZG50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNhdmVJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXBhcmVIVE1MX0xpc3RJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBidXR0b25zQ29udGFpbmVyLmFwcGVuZENoaWxkKHJlbW92ZUJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdXAgYnV0dG9uXHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHVwQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICB1cEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdkYXRhX19saXN0LWl0ZW0tdXAnKTtcclxuICAgICAgICAgICAgICAgIHVwQnV0dG9uLmlubmVyVGV4dCA9ICc8PCc7XHJcbiAgICAgICAgICAgICAgICB1cEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBpdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBpZGVkbnRpZmllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IGl0ZW1zW2luZGV4IC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zW2luZGV4IC0gMV0gPSBpdGVtc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zW2luZGV4XSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVwYXJlSFRNTF9MaXN0SXRlbXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQodXBCdXR0b24pO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIGRvd24gYnV0dG9uXHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGRvd25CdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgICAgIGRvd25CdXR0b24uY2xhc3NMaXN0LmFkZCgnZGF0YV9fbGlzdC1pdGVtLWRvd24nKTtcclxuICAgICAgICAgICAgICAgIGRvd25CdXR0b24uaW5uZXJUZXh0ID0gJz4+JztcclxuICAgICAgICAgICAgICAgIGRvd25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gaXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWRlZG50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBpdGVtc1tpbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tpbmRleCArIDFdID0gaXRlbXNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tpbmRleF0gPSB0ZW1wOyAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUl0ZW1zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXBhcmVIVE1MX0xpc3RJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChkb3duQnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBhbGwgZWxlbWVudHMgdG8gaXRlbVxyXG4gICAgICAgICAgICAgICAgaXRlbUVsZW1lbnQuYXBwZW5kQ2hpbGQobmFtZUl0ZW1Db250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgaXRlbUVsZW1lbnQuYXBwZW5kQ2hpbGQoY29sb3JJdGVtQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIGl0ZW1FbGVtZW50LmFwcGVuZENoaWxkKHZhbHVlSXRlbUNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICBpdGVtRWxlbWVudC5hcHBlbmRDaGlsZChidXR0b25zQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBpdGVtIHRvIGxpc3RcclxuICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kKGl0ZW1FbGVtZW50KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDbGVhciBpdGVtcyBmcm9tIGxvY2FsIHN0b3JhZ2VcclxuICAgIGZ1bmN0aW9uIGNsZWFySXRlbXMoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2l0ZW1zJyk7XHJcbiAgICAgICAgICAgIGl0ZW1zID0gW107XHJcbiAgICAgICAgICAgIGxpc3QuaHRtbCgnJyk7XHJcbiAgICAgICAgICAgIC8vIFJlbG9hZCBjaGFydFxyXG4gICAgICAgICAgICAgICAgcmVsb2FkQ2hhcnQoKTtcclxuICAgICAgICAgICAgLy8gU2hvdyBvciBoaWRlIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICBzaG93T3JIaWRlRWxlbWVudHMoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJCgnI2NsZWFyX19idG4nKS5jbGljaygoKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY2xlYXJJdGVtcygpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuLy8gUmVsb2FkIENoYXJ0XHJcbiAgICBmdW5jdGlvbiByZWxvYWRDaGFydCgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZihteUNoYXJ0Q3JlYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBteUNoYXJ0Q3JlYXRlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgZGF0YXNldHMgPSBpdGVtcy5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogW2l0ZW0udmFsdWVdLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXRlbS5jb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogaXRlbS5jb2xvcixcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgbXlDaGFydENyZWF0ZSA9IG5ldyBDaGFydChjdHhDcmVhdGUsIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsczogWycnXSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0czogZGF0YXNldHNcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzaG93T3JIaWRlRWxlbWVudHMoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coaXRlbXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgaWYoaXRlbXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgICQoJyNjbGVhcl9fYnRuJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2FzY19fYnRuJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2Rlc2NfX2J0bicpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJyNkb3dubG9hZF9fYnRuJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUNoYXJ0JykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnI2NsZWFyX19idG4nKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjYXNjX19idG4nKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjZGVzY19fYnRuJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2Rvd25sb2FkX19idG4nKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjY3JlYXRlQ2hhcnQnKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4vLyBTb3J0IGl0ZW1zIGJ5IHZhbHVlIGFzY2VuZGluZ1xyXG4gICAgJCgnI2FzY19fYnRuJykuY2xpY2soKCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGl0ZW1zLnNvcnQoKGEsIGIpID0+IGEudmFsdWUgLSBiLnZhbHVlKTtcclxuICAgICAgICAgICAgc2F2ZUl0ZW1zKCk7XHJcbiAgICAgICAgICAgIHByZXBhcmVIVE1MX0xpc3RJdGVtcygpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuLy8gU29ydCBpdGVtcyBieSB2YWx1ZSBkZXNjZW5kaW5nXHJcbiAgICAkKCcjZGVzY19fYnRuJykuY2xpY2soKCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGl0ZW1zLnNvcnQoKGEsIGIpID0+IGIudmFsdWUgLSBhLnZhbHVlKTtcclxuICAgICAgICAgICAgc2F2ZUl0ZW1zKCk7XHJcbiAgICAgICAgICAgIHByZXBhcmVIVE1MX0xpc3RJdGVtcygpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuLy8gRG93bmxvYWQgUE5HXHJcbiAgICAkKCcjZG93bmxvYWRfX2J0bicpLmNsaWNrKCgpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NyZWF0ZUNoYXJ0Jyk7XHJcbiAgICAgICAgICAgIGxldCBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJyk7XHJcbiAgICAgICAgICAgIGxldCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICBhLmhyZWYgPSBkYXRhVVJMO1xyXG4gICAgICAgICAgICBhLmRvd25sb2FkID0gJ2NoYXJ0LnBuZyc7XHJcbiAgICAgICAgICAgIGEuY2xpY2soKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4vLyBMb2FkIGl0ZW1zIGZyb20gbG9jYWwgc3RvcmFnZVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgbG9hZEl0ZW1zKCk7XHJcbiAgICB9LCAxMDAwKTtcclxuIl19
